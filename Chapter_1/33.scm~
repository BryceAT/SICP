;(load "Desktop/scheme_script/Chapter_1/33.scm")

(define (identity x) x)
(define (plus1 x) (+ x 1))
(define (square x) (* x x))

;filter takes a and uses it if filter is true at a
;recursive
(define (filtered-accumulater filter combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (if (filter a) (term a) null-value)
         (accumulater combiner null-value term (next a) next b))))

;iteritive
(define (filtered-accumulate filter combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (combiner (if (filter a)
				     (term a)
				     null-value) result))))
  (iter a null-value))

(define (sum-square-prime term a next b)
  (filtered-accumulate prime? + 0 term a next b))

(define (product term a next b)
  (accumulate * 1 term a next b))
