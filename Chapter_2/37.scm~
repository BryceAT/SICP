#|
(load "Desktop/scheme_script/Chapter_2/37.scm")
|#
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op 
                      initial 
                      (cdr sequence)))))
(define (enumerate-tree tree)
  (cond ((null? tree) ())
        ((not (pair? tree)) (list tree))
        (else (append 
               (enumerate-tree (car tree))
               (enumerate-tree (cdr tree))))))

(define (dot-product v w)
  (accumulate + 0 (map * v w)))

(define M (list (list 1 2 3 4) (list 4 5 6 6) (list 6 7 8 9)))
(define v3 (list 1 1 1 ))
(define v4 (list 1 1 1 1))

(define (matrix-*-vector m v)
  (map (lambda (w) (dot-product v w)) m))

(define (transpose mat)
  (accumulate-n ⟨??⟩ ⟨??⟩ mat))

(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map ⟨??⟩ m)))
